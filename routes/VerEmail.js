import express from "express";
import { PrismaClient } from "@prisma/client";
import nodemailer from "nodemailer";
import dotenv from "dotenv";
import { sendVerificationEmail } from "../API/email.js";

dotenv.config();

const emailrouter = express.Router();
const prisma = new PrismaClient();
emailrouter.use(express.json());

// Fun√ß√£o para enviar o e-mail de verifica√ß√£o

// Rota para verificar e-mail pelo token

// Rota para reenviar verifica√ß√£o
emailrouter.post("/verifyagain", async (req, res) => {
    try {
        console.log("üìß Recebida solicita√ß√£o para /verifyagain");
        console.log("Corpo da requisi√ß√£o:", req.body);
        
        const { email } = req.body;
        
        if (!email) {
            console.log("‚ùå Email n√£o fornecido");
            return res.status(400).json({ 
                success: false,
                error: "Email √© obrigat√≥rio" 
            });
        }

        console.log(`üîç Buscando usu√°rio: ${email}`);

        // Buscar usu√°rio
        const user = await prisma.user.findUnique({ 
            where: { email } 
        });

        if (!user) {
            console.log("‚ùå Usu√°rio n√£o encontrado");
            return res.status(404).json({ 
                success: false,
                error: "Usu√°rio n√£o encontrado" 
            });
        }

        if (user.EmailVer) {
            console.log("‚ÑπÔ∏è Email j√° verificado");
            return res.status(400).json({ 
                success: false,
                error: "Email j√° verificado" 
            });
        }

        console.log(`üîÑ Reenviando email para usu√°rio: ${user.id}`);
        console.log(`Token do usu√°rio: ${user.EToken}`);

        // Tentar enviar email
        const emailEnviado = await sendVerificationEmail(user.email, user.EToken);

        if (emailEnviado) {
            console.log("‚úÖ Email enviado com sucesso");
            res.status(200).json({ 
                success: true,
                message: "E-mail de verifica√ß√£o reenviado com sucesso!" 
            });
        } else {
            console.log("‚ùå Falha no envio do email");
            res.status(500).json({ 
                success: false,
                error: "Falha ao enviar e-mail. Tente novamente mais tarde." 
            });
        }

    } catch (err) {
        console.error("üí• Erro completo em /verifyagain:", err);
        res.status(500).json({ 
            success: false,
            error: "Erro interno do servidor",
            details: process.env.NODE_ENV === 'development' ? err.message : undefined
        });
    }
});

export default emailrouter;